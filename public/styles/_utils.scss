@mixin border-radius($top, $right: $top, $bottom: $top, $left: $top) {
  -webkit-border-radius: $top $right $bottom $left;
  -moz-border-radius:    $top $right $bottom $left;
  -ms-border-radius:     $top $right $bottom $left;
  border-radius:         $top $right $bottom $left;
}

@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition:    $transition;
  -o-transition:      $transition;
  transition:         $transition;
}

@mixin transform-transition($transition-time, $method) {
  -webkit-transition: -webkit-transform $transition-time $method;
  -moz-transition:    -moz-transform $transition-time $method;
  -o-transition:      -o-transform $transition-time $method;
  transition:         transform $transition-time $method;
}

@mixin background-size($size) {
  -webkit-background-size: $size;
  -moz-background-size:    $size;
  -o-background-size:      $size;
  background-size:         $size;
}

@mixin background-cover() {
  @include background-size(cover);
  background-position: center center;
  background-repeat: no-repeat;
}

@mixin translate-x($distance){
  -webkit-transform: translateX($distance);
  -moz-transform:    translateX($distance);
  -o-transform:      translateX($distance);
  -ms-transform:     translateX($distance);
  transform:         translateX($distance);
}

@mixin translate-y($distance) {
  -webkit-transform: translateY($distance);
  -moz-transform:    translateY($distance);
  -o-transform:      translateY($distance);
  -ms-transform:     translateY($distance);
  transform:         translateY($distance);
}

@mixin translate-z($distance) {
  -webkit-transform: translateZ($distance);
  -moz-transform:    translateZ($distance);
  -o-transform:      translateZ($distance);
  -ms-transform:     translateZ($distance);
  transform:         translateZ($distance);
}

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x,$y,$z);
  -moz-transform:    translate3d($x,$y,$z);
  -o-transform:      translate3d($x,$y,$z);
  -ms-transform:     translate3d($x,$y,$z);
  transform:         translate3d($x,$y,$z);
}

@mixin scale($proportion) {
  -webkit-transform: scale($proportion);
  -moz-transform:    scale($proportion);
  -o-transform:      scale($proportion);
  -ms-transform:     scale($proportion);
  transform:         scale($proportion);
}

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow:    $shadow;
  box-shadow:         $shadow;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }
  @keyframes $animation-name {
    @content;
  }
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

// Test if `$value` is a valid direction
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}